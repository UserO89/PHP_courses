finally added pictures for all the courses, fixed admin panel for courses so now admin can do all the CRUD operations for them as well, fixed home page that was still working with .json files that I noticed just now + update its design, add the profile page some content about the user, added some reviews generated by AI to database 
### Планы по развитию проекта:

#### **Основные задачи (Текущий этап):**


разобраться с реализацией работы админа с курсами, там что то нечисто
сделать регистрацию



*   **Страница курса (`course.php`):**
    *   Доработка отображения полной информации о курсе.
    *   Реализация подключения отзывов и курсов из базы данных вместо JSON на главной странице.
    *   Упрощение кода для стиля "университетского проекта".
    *   убрать бесящее приближение при наведении

*   **Функциональность пользователей:**
    *   Отображение активных курсов для каждого пользователя на странице профиля.
    *   Возможность администратору добавлять курсы пользователям.
    *   Возможность пользователям добавлять курсы себе (подобие корзины).

*   **Отзывы:**
    *   Реализация возможности добавления отзывов к курсам, которые пользователь уже добавил себе.
    *   Создание SQL-запросов для вставки отзывов (уникальных, с рандомными датами).

*   **Валидация:**
    *   Пересмотр текущей реализации валидации.
    *   Добавление класса для валидации (например, `ValidationService`).
    *   Усиление валидации паролей (длина, сложность) в методах регистрации/обновления пользователя.

*   **Оптимизация кода:**
    *   Пересмотр классов `Course.php` и `User.php` на предмет ненужных функций.
    *   заменить уведомления на руссском на английскую альтернативу (в основном касается админки на курсах)


    #### **Планы на будущее:**

*   Создать `README` для проекта.
*   Дальнейшее упрощение кода.
*   Глубокая проработка и реализация принципов SOLID.



-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------





#### **Архитектурные улучшения (SOLID-принципы):**

*   **Рефакторинг `Course` и `Database`:**
    *   **Удалить наследование `Course extends Database`.**
    *   **Внедрить `Database`** (или лучше, интерфейс `IDatabaseConnection`) в `CourseRepository` через конструктор (Dependency Injection).
    *   **Переместить все методы работы с БД из `Course` в `CourseRepository`.**
    *   **Превратить `Course` в чистый класс-модель**, представляющий собой один курс.
*   **Улучшенная обработка ошибок:** Внедрить глобальный обработчик исключений или вернуть `try-catch` блоки с более информативными сообщениями для пользователя (без раскрытия деталей сервера).
*   **Разделение ответственности:** Подумать о внедрении паттернов, таких как "Репозиторий" и "Сервис", для более четкого разделения бизнес-логики, логики работы с данными и логики представления.
*   **Конфигурация:** Вынести базовые пути и другие настройки в централизованный конфигурационный файл или константы.

Нет репозиториев/сервисов: Вся логика работы с данными курсов находится непосредственно в классе Course.
Лучшей практикой было бы использовать паттерн "Репозиторий" (например, CourseRepository), который бы инкапсулировал
всю логику взаимодействия с базой данных для курсов, а сам класс Course был бы просто моделью данных.

#### **Рекомендации для улучшения:**

*   **Рефакторинг `Course` и `Database`:**
    *   Удалить наследование `Course extends Database`.
    *   Внедрить `Database` (или лучше, интерфейс `IDatabaseConnection`) в `CourseRepository` через конструктор (Dependency Injection).
    *   Переместить все методы работы с БД из `Course` в `CourseRepository`.
    *   Превратить `Course` в чистый класс-модель, представляющий собой один курс.

*   **Усиление валидации:**
    *   Добавить строгие правила валидации паролей в метод регистрации/обновления пользователя.
    *   Централизовать валидацию входных данных в моделях или специализированных классах валидации.

*   **Улучшенная обработка ошибок:** Внедрить глобальный обработчик исключений или вернуть `try-catch` блоки с более информативными сообщениями для пользователя (без раскрытия деталей сервера).

*   **Разделение ответственности:** Подумать о внедрении паттернов, таких как "Репозиторий" и "Сервис", для более четкого разделения бизнес-логики, логики работы с данными и логики представления.

*   **Конфигурация:** Вынести базовые пути и другие настройки в централизованный конфигурационный файл или константы.

#### **Общий вердикт:**

Проект функционален и демонстрирует понимание основных концепций веб-разработки и ООП. Однако, для перехода на следующий уровень и соответствия более строгим стандартам, ему требуется серьезная архитектурная переработка с акцентом на принципы SOLID и улучшение общей структуры кода для повышения его поддерживаемости и масштабируемости.